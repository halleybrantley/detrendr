aes(alpha=.4),
size=4) +
guides(alpha="none")
grid_fit <- grid100.latlon %>%
filter(layer %in% as.numeric(colnames(X)))
ggmap(map) +
geom_point(data = grid_fit,
aes(alpha=.4),
size=2) +
guides(alpha="none")
grid_fit <- grid100.latlon %>%
filter(layer %in% as.numeric(colnames(X)))
ggmap(map) +
geom_point(data = grid_fit,
aes(alpha=.4),
size=2, col="white") +
guides(alpha="none")
coords_Spod <- coord.UTM[1,]
gridwidth <- grid_res
nTraj <- 5
i <- 45
sqrt(spod_stats$u[i]^2 + spod_stats$v[i]^2)*1.2
i <- 20
i <- 45
ws <- sqrt(spod_stats$u[i]^2 + spod_stats$v[i]^2)*1.2
MaxFetch <- ws*60*10
MaxFetch
ws
part_traj <-  getTraj(sigmaU = spod_stats$sigmaU[i],
sigmaV = spod_stats$sigmaV[i],
sigmaW = spod_stats$sigmaW[i],
ustar = spod_stats$ustar_trend[i],
flux = spod_stats$flux[i],
L = spod_stats$L_trend[i],
u = spod_stats$u[i],
v = spod_stats$v[i],
w = spod_stats$w[i],
nTraj= nTraj,
outSteps = 3,
MaxFetch = MaxFetch)
library(devtools)
load_all("../Code/traxr")
part_traj <-  getTraj(sigmaU = spod_stats$sigmaU[i],
sigmaV = spod_stats$sigmaV[i],
sigmaW = spod_stats$sigmaW[i],
ustar = spod_stats$ustar_trend[i],
flux = spod_stats$flux[i],
L = spod_stats$L_trend[i],
u = spod_stats$u[i],
v = spod_stats$v[i],
w = spod_stats$w[i],
nTraj= nTraj,
outSteps = 3,
MaxFetch = MaxFetch)
ggmap(map) +
geom_point(data = part_traj,
aes(x=x, y=y, col=z),
size=2) +
guides(alpha="none") +
scale_color_distiller(palette= "Spectral")
coords_Spod[1]
coords_Spod[2]
head(part_traj)
part_traj$x <- part_traj$x + coords_Spod[1]
part_traj$y <- part_traj$y + coords_Spod[2]
head(part_traj)
traj_coord = SpatialPoints(part_traj[, c("x", "y")],
proj4string=CRS("+init=epsg:26916"))
library(rgdal)
library(geoR)
traj_coord = SpatialPoints(part_traj[, c("x", "y")],
proj4string=CRS("+init=epsg:26916"))
?SpatialPoints
traj_coord = SpatialPoints(part_traj[, c("x", "y")],
proj4string=CRS("+init=epsg:26916"))
traj_latlon <- coordinates(spTransform(traj_coord, CRS("+proj=longlat")))
traj_latlon
part_traj, c("lat", "lon")] <- traj_latlon
part_traj[, c("lat", "lon")] <- traj_latlon
head(part_traj  )
ggmap(map) +
geom_point(data = part_traj,
aes(col=z),
size=2) +
guides(alpha="none") +
scale_color_distiller(palette= "Spectral")
names(grid_fit)
names(part_traj)
head(part_traj)
part_traj[, c("lon", "lat")] <- traj_latlon
ggmap(map) +
geom_point(data = part_traj,
aes(col=z),
size=2) +
guides(alpha="none") +
scale_color_distiller(palette= "Spectral")
ggmap(map) +
geom_point(data = part_traj,
aes(col=z),
size=.5) +
guides(alpha="none") +
scale_color_distiller(palette= "Spectral")
ggmap(map) +
geom_point(data = part_traj,
aes(col=z),
size=.5, alpha = .3) +
guides(alpha="none") +
scale_color_distiller(palette= "Spectral")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(ggmap)
register_google(key="AIzaSyBEiKKah1y_DAPJXmizcVaZt7py8C3T_ic")
library(devtools)
library(rgdal)
library(geoR)
load_all("../Code/traxr")
rm(list=ls())
load("../Data/grid200.RData")
map <- get_map(location = c(lon = site_coords[1,2],
lat = site_coords[1,1]),
maptype = "hybrid", zoom=16)
spod_stats$time[i]
load("../Data/processed/paramfit_200m_10min_2018-06-19_j.RData")
load("../Data/processed/grid_200m_10min_2018-06-19_j.RData")
load("../Data/processed/summary_10min_2018-06-19_j.RData")
load("../Data/processed/spod_2018-06-19_j.RData")
i <- 45
spod_stats$time[i]
grid_fit <- grid100.latlon %>%
filter(layer %in% as.numeric(colnames(X)))
ggmap(map) +
geom_point(data = grid_fit,
aes(alpha=.4),
size=2, col="blue") +
geom_point(data=site_coords, aes(x=lon, y=lat),
fill="yellow", col = "black", shape=17, size = 2)+
guides(alpha="none")
grid_fit <- grid100.latlon %>%
filter(layer %in% as.numeric(colnames(X)))
ggmap(map) +
geom_point(data = grid_fit,
aes(alpha=.4),
size=2, col="blue") +
geom_point(data=site_coords[1,], aes(x=lon, y=lat),
col ="yellow", shape=17, size = 3)+
guides(alpha="none")
bplot <- gather(B, "basis", "value")
?gather
bplot <- tidyr::gather(B, "basis", "value")
bplot <- tidyr::gather(as.data.frame(B), "basis", "value")
head(bplot)
bplot <- B %>% as.data.frame() %>%
mutate(x=seq(1, nrow(B), 1)) %>%
gather("basis", "value", -x)
head(bplot)
ggplot(bplot, aes(x=x, y=y, group=basis)) +
geom_line() +
theme_bw()
bplot <- B %>% as.data.frame() %>%
mutate(x=seq(1, nrow(B), 1)) %>%
gather("basis", "value", -x)
ggplot(bplot, aes(x=x, y=y, group=basis)) +
geom_line() +
theme_bw()
ggplot(bplot, aes(x=x, y=value, group=basis)) +
geom_line() +
theme_bw()
n <- nrow(X)
bplot2 <-
bs(seq(1,n,1), df = 6, degree=3, intercept = TRUE) %>%
as.data.frame() %>%
mutate(x=seq(1, nrow(B), 1)) %>%
gather("basis", "value", -x)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(ggmap)
register_google(key="AIzaSyBEiKKah1y_DAPJXmizcVaZt7py8C3T_ic")
library(devtools)
library(rgdal)
library(geoR)
library(splines)
load_all("../Code/traxr")
rm(list=ls())
load("../Data/grid200.RData")
map <- get_map(location = c(lon = site_coords[1,2],
lat = site_coords[1,1]),
maptype = "hybrid", zoom=16)
bplot2 <-
bs(seq(1,n,1), df = 6, degree=3, intercept = TRUE) %>%
as.data.frame() %>%
mutate(x=seq(1, nrow(B), 1)) %>%
gather("basis", "value", -x)
n
n <- nrow(X)
bplot2 <-
bs(seq(1,n,1), df = 8, degree=3, intercept = TRUE) %>%
as.data.frame() %>%
mutate(x=seq(1, nrow(B), 1)) %>%
gather("basis", "value", -x)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(ggmap)
register_google(key="AIzaSyBEiKKah1y_DAPJXmizcVaZt7py8C3T_ic")
library(devtools)
library(rgdal)
library(geoR)
library(splines)
load_all("../Code/traxr")
rm(list=ls())
load("../Data/grid200.RData")
map <- get_map(location = c(lon = site_coords[1,2],
lat = site_coords[1,1]),
maptype = "hybrid", zoom=16)
load("../Data/processed/paramfit_200m_10min_2018-06-19_j.RData")
load("../Data/processed/grid_200m_10min_2018-06-19_j.RData")
load("../Data/processed/summary_10min_2018-06-19_j.RData")
load("../Data/processed/spod_2018-06-19_j.RData")
bplot <- B %>% as.data.frame() %>%
mutate(x=seq(1, nrow(B), 1)) %>%
gather("basis", "value", -x)
ggplot(bplot, aes(x=x, y=value, group=basis)) +
geom_line() +
theme_bw() +
labs(title = "4 basis functions")
n <- nrow(X)
bplot2 <-
bs(seq(1,n,1), df = 8, degree=3, intercept = TRUE) %>%
as.data.frame() %>%
mutate(x=seq(1, nrow(B), 1)) %>%
gather("basis", "value", -x)
ggplot(bplot, aes(x=x, y=value, group=basis)) +
geom_line() +
theme_bw() +
labs(title = "8 basis functions")
bplot <- B %>% as.data.frame() %>%
mutate(x=seq(1, nrow(B), 1)) %>%
gather("basis", "value", -x)
ggplot(bplot, aes(x=x, y=value, group=basis)) +
geom_line() +
theme_bw() +
labs(title = "4 basis functions")
n <- nrow(X)
bplot2 <-
bs(seq(1,n,1), df = 8, degree=3, intercept = TRUE) %>%
as.data.frame() %>%
mutate(x=seq(1, nrow(B), 1)) %>%
gather("basis", "value", -x)
ggplot(bplot2, aes(x=x, y=value, group=basis)) +
geom_line() +
theme_bw() +
labs(title = "8 basis functions")
bplot <- B %>% as.data.frame() %>%
mutate(x=seq(1, nrow(B), 1)) %>%
gather("basis", "value", -x)
ggplot(bplot, aes(x=x, y=value, group=basis)) +
geom_line() +
theme_bw() +
labs(title = "4 basis functions")
n <- nrow(X)
bplot2 <-
bs(seq(1,n,1), df = 8, degree=3, intercept = TRUE) %>%
as.data.frame() %>%
mutate(x=seq(1, nrow(B), 1)) %>%
gather("basis", "value", -x)
ggplot(bplot2, aes(x=x, y=value, group=basis)) +
geom_line() +
theme_bw() +
labs(title = "8 basis functions")
dim(B)
beta1 <- c(1, 1, 0, 0)
plotdf <- data.frame(time = spod_stats$time, Q = B%*%beta1)
beta1 <- c(1, 1, 0, 0)
plotdf <- data.frame(time = spod_stats$time, Q = B%*%beta1)
ggplot(plotdf, aes(x=time, y=Q)) +
geom_line() +
theme_bw() +
title(bquote(beta=c(1,1,0,0)))
beta1 <- c(1, 1, 0, 0)
plotdf <- data.frame(time = spod_stats$time, Q = B%*%beta1)
ggplot(plotdf, aes(x=time, y=Q)) +
geom_line() +
theme_bw() +
labs(title=bquote(beta=c(1,1,0,0)))
ggplot(plotdf, aes(x=time, y=Q)) +
geom_line() +
theme_bw() +
labs(title=expression(beta=c(1,1,0,0)))
ggplot(plotdf, aes(x=time, y=Q)) +
geom_line() +
theme_bw() +
labs(title=expression(beta"=(1,1,0,0)"))
beta1 <- c(1, 1, 0, 0)
plotdf <- data.frame(time = spod_stats$time, Q = B%*%beta1)
ggplot(plotdf, aes(x=time, y=Q)) +
geom_line() +
theme_bw() +
labs(title=expression(beta~"=(1,1,0,0)"))
B8 <- bs(seq(1,n,1), df = 8, degree=3, intercept = TRUE)
beta2 <- c(1, 1, 0, 0, 1, 1, 0, 0)
plotdf <- data.frame(time = spod_stats$time, Q = B8%*%beta2)
ggplot(plotdf, aes(x=time, y=Q)) +
geom_line() +
theme_bw() +
labs(title=expression(beta~"=(1, 1, 0, 0, 1, 1, 0, 0)"))
beta1 <- c(1, 1, 0, 0)
plotdf <- data.frame(time = spod_stats$time, Q = B%*%beta1)
ggplot(plotdf, aes(x=time, y=Q)) +
geom_line() +
theme_bw() +
labs(title=expression(beta~"=(1,1,0,0)"))
beta2 <- c(1, 1, 0, 0, 1, 1, 0, 0)
plotdf <- data.frame(time = spod_stats$time, Q = B8%*%beta2)
ggplot(plotdf, aes(x=time, y=Q)) +
geom_line() +
theme_bw() +
labs(title=expression(beta~"=(2, 2, 0, 0, 1, 1, 0, 0)"))
beta1 <- c(0, 0, 1, 1)
plotdf <- data.frame(time = spod_stats$time, Q = B%*%beta1)
ggplot(plotdf, aes(x=time, y=Q)) +
geom_line() +
theme_bw() +
labs(title=expression(beta~"=(0,0,1,1)"))
beta2 <- c(1, 1, 0, 0, 1, 1, 0, 0)
plotdf <- data.frame(time = spod_stats$time, Q = B8%*%beta2)
ggplot(plotdf, aes(x=time, y=Q)) +
geom_line() +
theme_bw() +
labs(title=expression(beta~"=(2, 2, 0, 0, 1, 1, 0, 0)"))
beta <- rstan::extract(param_fit, 'beta')$beta
beta <- apply(exp(beta), c(2,3), mean)
grid_fit <- grid100.latlon %>%
filter(layer %in% as.numeric(colnames(X)))
grid_fit[,c("beta1", "beta2", "beta3", "beta4")] <- beta
ggmap(map) +
geom_point(data = grid_fit,
aes(col=beta2, alpha=.5),
size=4) +
geom_point(data=site_coords, aes(x=lon, y=lat),
col="black", shape=17, size = 4)+
guides(alpha="none") +
labs(col = "Source Est.", title = expression(beta[2])) +
scale_color_distiller(palette = "Spectral")
beta
beta <- t(apply(exp(beta), c(2,3), mean))
beta <- rstan::extract(param_fit, 'beta')$beta
beta <- t(apply(exp(beta), c(2,3), mean))
grid_fit <- grid100.latlon %>%
filter(layer %in% as.numeric(colnames(X)))
grid_fit[,c("beta1", "beta2", "beta3", "beta4")] <- beta
ggmap(map) +
geom_point(data = grid_fit,
aes(col=beta1, alpha=.5),
size=4) +
geom_point(data=site_coords, aes(x=lon, y=lat),
col="black", shape=17, size = 4)+
guides(alpha="none") +
labs(col = NULL) +
scale_color_distiller(palette = "Spectral")
max(beta)
beta <- rstan::extract(param_fit, 'beta')$beta
beta <- t(apply(exp(beta), c(2,3), mean))
grid_fit <- grid100.latlon %>%
filter(layer %in% as.numeric(colnames(X)))
grid_fit[,c("beta1", "beta2", "beta3", "beta4")] <- beta
ggmap(map) +
geom_point(data = grid_fit,
aes(col=beta1, alpha=.5),
size=4) +
geom_point(data=site_coords, aes(x=lon, y=lat),
col="black", shape=17, size = 4)+
guides(alpha="none") +
labs(col = NULL, title = expression(beta[1])) +
scale_color_distiller(palette = "Spectral", limits = c(0, 4))
ggmap(map) +
geom_point(data = grid_fit,
aes(col=beta2, alpha=.5),
size=4) +
geom_point(data=site_coords, aes(x=lon, y=lat),
col="black", shape=17, size = 4)+
guides(alpha="none") +
labs(col = NULL, title = expression(beta[2])) +
scale_color_distiller(palette = "Spectral")
ggmap(map) +
geom_point(data = grid_fit,
aes(col=beta2, alpha=.5),
size=4) +
geom_point(data=site_coords[1,], aes(x=lon, y=lat),
col="black", shape=17, size = 4)+
guides(alpha="none") +
labs(col = NULL, title = expression(beta[2])) +
scale_color_distiller(palette = "Spectral")
?ggmap
mu <- rstan::extract(param_fit, 'mu')$mu
muHat <- colMeans(mu)
mu <- rstan::extract(param_fit, 'mu')$mu
muHat <- colMeans(mu)
plot(y~muHat)
knitr::opts_chunk$set(echo = TRUE)
plot_pred <- data.frame(y = y, yHat=colMeans(mu))
mu <- rstan::extract(param_fit, 'mu')$mu
plot_pred <- data.frame(y = y, yHat=colMeans(mu))
plot_pred <- plot_pred*1000/5
ggplot(plot_pred, aes(y = muHat, x = y)) +
geom_point() +
theme_bw() +
labs(x="Observed SPod Measurement", y="Predicted SPod Measurement")
mu <- rstan::extract(param_fit, 'mu')$mu
plot_pred <- data.frame(y = y, yHat=colMeans(mu))
head(plot_pred)
plot_pred*1000/5
head(plot_pred)
plot_pred <- plot_pred*1000/5
head(plot_pred)
ggplot(plot_pred, aes(y = muHat, x = y)) +
geom_point() +
theme_bw() +
labs(x="Observed SPod Measurement", y="Predicted SPod Measurement")
ggplot(plot_pred, aes(y = yHat, x = y)) +
geom_point() +
theme_bw() +
labs(x="Observed SPod Measurement", y="Predicted SPod Measurement")
ggplot(plot_pred, aes(y = yHat, x = y)) +
geom_point() +
theme_bw() +
geom_abline(0,1) +
labs(x="Observed SPod Measurement", y="Predicted SPod Measurement")
ggplot(plot_pred, aes(y = yHat, x = y)) +
geom_point() +
theme_bw() +
geom_abline(intercept=0,slope=1) +
labs(x="Observed SPod Measurement", y="Predicted SPod Measurement")
mu <- rstan::extract(param_fit, 'mu')$mu
plot_pred <- data.frame(y = y, yHat=colMeans(mu))
plot_pred <- plot_pred*1000/5
ggplot(plot_pred, aes(y = yHat, x = y)) +
geom_point() +
theme_bw() +
geom_abline(intercept=0,slope=1) +
labs(x="Observed SPod", y="Predicted SPod")
load("../Data/processed/paramfit_200m_10min_2018-06-19_j.RData")
load("../Data/processed/paramfit_200m_10min_2018-06-18_j.RData")
beta <- rstan::extract(param_fit, 'beta')$beta
beta <- t(apply(exp(beta), c(2,3), mean))
plot(as.numeric(beta))
plot(as.numeric(t(beta)))
load("../Data/processed/paramfit_200m_10min_2018-06-18_j.RData")
beta <- rstan::extract(param_fit, 'beta')$beta
beta <- t(apply(exp(beta), c(2,3), mean))
grid_fit <- grid100.latlon %>%
filter(layer %in% as.numeric(colnames(X)))
grid_fit[,c("beta1", "beta2", "beta3", "beta4")] <- beta
ggmap(map, extent = "device") +
geom_point(data = grid_fit,
aes(col=beta1, alpha=.5),
size=4) +
geom_point(data=site_coords[1,], aes(x=lon, y=lat),
col="black", shape=17, size = 4)+
guides(alpha="none") +
labs(col = NULL, title = expression(beta[1])) +
scale_color_distiller(palette = "Spectral", limits = c(0, 4))
beta_df <- beta %>% as.data.frame() %>%
mutate(k = seq(1, ncol(X), 1)) %>%
gather("basis", "value", -k)
head(beta_df)
beta <- t(apply(exp(beta), c(2,3), mean))
colnames(beta) <- c("B1", "B2", "B3", "B4")
beta <- rstan::extract(param_fit, 'beta')$beta
beta <- t(apply(exp(beta), c(2,3), mean))
colnames(beta) <- c("B1", "B2", "B3", "B4")
beta_df <- beta %>% as.data.frame() %>%
mutate(k = seq(1, ncol(X), 1)) %>%
gather("basis", "value", -k)
ggplot(beta_df, aes(x=k, y=value, col=basis)) +
geom_point() +
theme_bw()
ggplot(beta_df, aes(x=k, y=value, col=basis)) +
geom_point() +
theme_bw() +
scale_color_brewer(palette= "Set1")
ggplot(beta_df, aes(x=k, y=value, col=basis)) +
geom_point(size = basis) +
theme_bw() +
scale_color_brewer(palette= "Set1")
ggplot(beta_df, aes(x=k, y=value, col=basis)) +
geom_point(aes(size = basis)) +
theme_bw() +
scale_color_brewer(palette= "Set1")
ggplot(beta_df, aes(x=k, y=value, col=basis)) +
geom_point() +
theme_bw() +
scale_color_brewer(palette= "Set1")
ggplot(beta_df, aes(x=k, y=value, col=basis)) +
geom_point() +
theme_bw() +
facet_grid(.~basis)
ggplot(beta_df, aes(x=k, y=value, col=basis)) +
geom_point() +
theme_bw() +
facet_grid(basis~.)
grid_fit$k <- seq(1, ncol(X), 1)
setwd("~/Repositories/detrendr")
library(pkgdown)
pkgdown::build_home()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "70%"
)
install_github("halleybrantley/detrendr")
library(devtools)
install_github("halleybrantley/detrendr")
